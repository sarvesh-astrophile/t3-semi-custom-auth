// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// #1.1.1 User model
model User {
    id                      String   @id @default(cuid())
    email                   String   @unique
    name                    String
    password_hash           String
    email_verified          Boolean  @default(false)
    registered_2FA          Boolean  @default(false)
    registered_totp         Boolean  @default(false)
    registered_passkey      Boolean  @default(false)
    registered_security_key Boolean  @default(false)
    recovery_code           String   @default("")
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt

    emailVerificationRequest EmailVerificationRequest?
    session                  Session?
    totp_credentials         TOTPCredentials?
    passkey_credentials      PasskeyCredentials[]
    webauthn_challenges      WebAuthnChallenge[]
}

// #2.1.1 Email verification request model
model EmailVerificationRequest {
    id                String   @id @default(cuid())
    user_id           String   @unique
    email             String   @unique
    verification_code String
    expires_at        DateTime
    createdAt         DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// #1.5.1 Session model
model Session {
    id                  String   @id @default(cuid())
    user_id             String   @unique
    two_factor_verified Boolean  @default(false)
    expires_at          DateTime
    createdAt           DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// #4.1.3 totp credentials model
model TOTPCredentials {
    id                String   @id @default(cuid())
    user_id           String   @unique
    totp_key          String
    createdAt         DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// #4.1.4 passkey credentials model
model PasskeyCredentials {
    id                String   @id @default(cuid())
    user_id           String
    name              String
    algorithm         Int
    public_key        Bytes
    createdAt         DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// #4.1.5 webauthn challenge model
model WebAuthnChallenge {
    id         String   @id @default(cuid())
    challenge  String   @unique
    user_id    String
    expires_at DateTime
    createdAt  DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}